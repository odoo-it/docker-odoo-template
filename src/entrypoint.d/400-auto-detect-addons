#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import subprocess
import logging
_logger = logging.getLogger(__name__)


RESOURCES = os.environ.get('RESOURCES')
SOURCES = os.environ.get('SOURCES')
REPOSITORIES = os.path.join(SOURCES, 'repositories')
USER_REPOSITORY = os.path.join(SOURCES, 'user')


def is_git_repository(path):
    return os.path.exists(os.path.join(path, ".git"))


addons = [
    os.path.join(SOURCES, 'odoo', 'addons'),
]

# Handle versions <= 9.0, where odoo is called openerp
if os.environ.get('ODOO_VERSION') in ['6.0', '7.0', '8.0', '9.0']:
    addons.append(os.path.join(SOURCES, 'odoo', 'openerp', 'addons'))
else:
    addons.append(os.path.join(SOURCES, 'odoo', 'odoo', 'addons'))

# Handle enterprise
if os.path.isdir(os.path.join(SOURCES, 'enterprise')):
    addons.insert(0, os.path.join(SOURCES, 'enterprise'))

# Local repository and its submodules
# Usually the project repository.
# Submodules are loaded the same way they are in odoo.sh
user_addons = []
if os.path.isdir(USER_REPOSITORY):
    user_addons = [USER_REPOSITORY]
    if is_git_repository(USER_REPOSITORY):
        try:
            user_addons += [
                os.path.join(USER_REPOSITORY, line.strip().split(" ")[1])
                for line in subprocess.check_output(
                    ["git", "submodule", "status"],
                    cwd=USER_REPOSITORY,
                    encoding="UTF-8",
                ).splitlines()
            ]
        except Exception as e:
            _logger.error("Unable to add submodules: %s", e)
            pass

# Image repositories, usually dependencies
# Changes from core image: make it recursive
# TODO: Make it search recursively until it finds .git directories?
# or until it finds an odoo addon?
repo_addons = []
if os.path.isdir(REPOSITORIES):
    repo_addons = [
        os.path.join(REPOSITORIES, subdir, d)
        for subdir in sorted(os.listdir(REPOSITORIES))
        for d in sorted(os.listdir(os.path.join(REPOSITORIES, subdir)))
        if os.path.isdir(os.path.join(REPOSITORIES, subdir, d))
    ]

# Repo addons are preprended, in case we want to overwrite odoo modules
addons = user_addons + repo_addons + addons

# Overwrite 10-addons.conf
_logger.debug('Updating addons_path.. %s' % addons)
with open(os.path.join(RESOURCES, 'conf.d', '10-addons.conf'), 'w+') as file:
    file.write('[options]\naddons_path = %s' % ','.join(addons))